#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define N 100005

typedef struct Node {
    int to;
    int next;
} Node;

Node edge[N * 2];
int head[N], disc[N], low[N];
bool vis[N];
int timer = 0;
int cnt = 0;
int ans_cnt = 0;
int ans[N][2];

void addEdge(int u, int v) {
    edge[cnt].to = v;
    edge[cnt].next = head[u];
    head[u] = cnt++;
}

void dfs(int u, int par) {
    vis[u] = true;
    disc[u] = low[u] = timer++;
    for (int i = head[u]; i != -1; i = edge[i].next) {
        int v = edge[i].to;
        if (v == par) continue;
        if (!vis[v]) {
            dfs(v, u);
            low[u] = (low[u] < low[v]) ? low[u] : low[v];
            if (low[v] > disc[u]) {
                ans[ans_cnt][0] = u;
                ans[ans_cnt][1] = v;
                ans_cnt++;
            }
        }
        else
            low[u] = (low[u] < disc[v]) ? low[u] : disc[v];
    }
}

int main() {
    int n, m;
    scanf("%d", &n);
    
    m=n;

    for (int i = 0; i <= n; i++) {
        head[i] = -1;
    }
   
    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(u, v);
        addEdge(v, u);
    }

    for (int i = 1; i <= n; i++) {
        if (!vis[i]) dfs(i, -1);
    }

    printf("Critical connections:\n");
    for (int i = 0; i < ans_cnt; i++) {
        printf("[%d, %d]\n", ans[i][0], ans[i][1]);
    }

    return 0;
}
